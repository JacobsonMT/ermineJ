<?xml version="1.0" ?>
<project xmlns:maven="jelly:maven"
		 xmlns:j="jelly:core"
		 xmlns:util="jelly:util"
		 xmlns:ant="jelly:ant"
		 xmlns:deploy="deploy"
 		 xmlns:jarfile="jarfile">

<!-- ==================================== -->
<!-- help jar file and arrangements for help to be included in the webstart -->
<!-- ==================================== -->
<goal name="help" description="Update and build the javahelp jar file">
	<ant:echo>Creating search index...</ant:echo>
	<ant:exec executable="${java.javahelp.jhindexer}">
	<arg value="-db" /> 
	<arg path="ermineJ-help/JavaHelpSearch" />
	<arg value="${basedir}/ermineJ-help/html" />
	</ant:exec>
	<ant:echo>Making help jar file...</ant:echo>
	<ant:jar destfile="${basedir}/ermineJ-help.jar" update="true" excludes="**/CVS/*" basedir="${basedir}/ermineJ-help" />
	<ant:copy todir="${basedir}/web/ermineJ-help" overwrite="true" >
	<fileset dir="${basedir}/ermineJ-help">
	 <include name="**/*" />
	</fileset>
	</ant:copy>

		<maven:get plugin="maven-jnlp-plugin" property="maven.jnlp.dir" var="jnlpDir" />
		<maven:get plugin="maven-jnlp-plugin" property="maven.jnlp.tmpdir" var="jnlpTmpDir" />
		<maven:get plugin="maven-jnlp-plugin" property="plugin.resources" var="jnlpRsc" />
	 	<ant:mkdir dir="${jnlpTmpDir}"/>
            
    <jarfile:updateManifest
        inputJar="${basedir}/ermineJ-help.jar"
        manifest="${jnlpRsc}/jnlp.manifest"
        outputDir="${jnlpTmpDir}"
    />
	
	
	<ant:copy todir="${jnlpDir}" file="${basedir}/JavaWebStart/help.jnlp" overwrite="true" />
	<ant:copy todir="${jnlpDir}" file="${maven.repo.local}/javahelp/jars/jh.jar" overwrite="true" />

	<ant:copy todir="${jnlpTmpDir}" file="${basedir}/ermineJ-help.jar" overwrite="true" />
	
	<ant:available file="${maven.jnlp.signjar.store}" property="maven.jnlp.store.exists"/>
	<j:if test="${maven.jnlp.store.exists}">	<echo>"Found a keystore"</echo></j:if>

	<!-- sign the jar -->
    <ant:signjar
    jar="${jnlpTmpDir}/ermineJ-help.jar"
    signedjar="${jnlpDir}/ermineJ-help.jar"
    alias="${pom.artifactId}"
    storepass="${maven.jnlp.signjar.storepass}"
    keystore="${maven.jnlp.signjar.store}"/>
	

</goal>


<!-- ==================================== -->
<!-- ==================================== -->
<goal name="jnlp:deploy" prereqs="jar:jar,help,jnlp" description="Deploy the webstart files to the server.">
</goal>


<!-- ==================================== -->
<!-- nsis-setup (windows only) -->
<!-- ==================================== -->
<goal name="nsis-setup" prereqs="jar:jar,help" description="Set up the bindist so it is (almost) ready for making the installer.">
<j:forEach var="lib" items="${pom.artifacts}">
 	  <ant:echo message=""/>
      <ant:echo message="Name  : ${lib.dependency.artifactId}"/>
      <ant:echo message="Group : ${lib.dependency.groupId}"/>
      <ant:echo message="Base  : ${lib.file.parent}"/>
      <ant:echo message="File  : ${lib.file.name}"/>
      <ant:echo message="Path  : ${lib.path}"/>
     <ant:copy file="${lib.path}"  tofile="${maven.build.dir}/${maven.nsis.build.dir}/lib/${lib.dependency.artifactId}.jar" />
  </j:forEach>
    
	<ant:copy file="${maven.build.dir}/${maven.final.name}.jar" tofile="${maven.build.dir}/${maven.nsis.build.dir}/lib/${pom.name}.jar" />
	
	<ant:copy file="${basedir}/ermineJ-help.jar" todir="${maven.build.dir}/${maven.nsis.build.dir}/lib" />
	
	<ant:mkdir dir="${maven.build.dir}/${maven.nsis.build.dir}/data" />
	<ant:mkdir dir="${maven.build.dir}/${maven.nsis.build.dir}/bin" />
	
	<ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/data" >
		<fileset dir="${basedir}/data" >
			 <include name="**/genesets" />
			 <include name="go_200406-termdb.xml" />
			 <include name="HG-U95A.an.txt" />
			 <exclude name="**/fake*" />
			 <exclude name="ClassScore.preferences" />
			 <exclude name="melanoma_and_sarcomaMAS5.txt" />
			 <exclude name="one-way-anova-parsed.txt" />
			 <exclude name="test.results.txt" />
		</fileset>
	</ant:copy>
</goal>


<!-- ==================================== -->
<!-- NSIS installer build -->
<!-- ==================================== -->
<goal name="nsis" description="NSIS installer build" prereqs="nsis-setup">
 
 <ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/bin" >
		<fileset dir="${basedir}/nsis-installer/files/bin" >
			<exclude name="**/CVS/" />
			<exclude name="**/*-jre.bat" />
		</fileset>
		</ant:copy>	
 
	<ant:exec executable="${nsis.exe}">
	<arg path="${basedir}/nsis-installer/src/ermineJ-setup.nsi" />
	</ant:exec>
	
</goal>


<!-- ==================================== -->
<!-- NSIS installer build, with JRE in the distribution -->
<!-- ==================================== -->
<goal name="nsis-jre" description="NSIS installer build, with JRE in the distribution" prereqs="nsis-setup">

<ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/bin" >
		<fileset dir="${basedir}/nsis-installer/files/bin" >
			<exclude name="**/CVS/" />
			<exclude name="**/ermineJ.bat" />
		</fileset>
		</ant:copy>	

    	<ant:exec executable="${nsis.exe}">
	<arg path="${basedir}/nsis-installer/src/ermineJ-setup-jre.nsi" />
	</ant:exec>
</goal>


<!-- ==================================== -->
<!-- ==================================== -->
<goal name="nsis:deploy" description="Upload the installer to the download site" prereqs="nsis">
    <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
      <arg line="${maven.scp.args} ${maven.build.dir}/ermineJ-setup.exe ${maven.username}@${maven.dist.siteAddress}:${dist.distdir}"/>
    </exec>
</goal>


<!-- ==================================== -->
<!-- ==================================== -->
<goal name="nsis-jre:deploy" description="Upload the installer with jre to the download site" prereqs="nsis-jre">
    <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
      <arg line="${maven.scp.args} ${maven.build.dir}/ermineJ-setup-jre.exe ${maven.username}@${maven.dist.siteAddress}:${dist.distdir}"/>
    </exec>
</goal>


<!-- ==================================== -->
<!-- ==================================== -->
<goal name="src-deploy" description="Upload the source distribution to the site" >

   <attainGoal name="dist:build-src" />

   <maven:user-check user="${maven.username}"/>

    <echo>
      srcAddress = ${maven.dist.siteAddress}
      srcDirectory = ${maven.dist.distDir}
      srcUser = ${maven.username}
    </echo>

   <exec dir="." executable="${maven.ssh.executable}">
      <arg line="${maven.ssh.args} -l ${maven.username} ${maven.dist.siteAddress} 'mkdir -p ${maven.dist.distdir}'"/>
    </exec>

    <echo>"${maven.scp.executable} ${maven.scp.args} ${maven.build.dir}/distributions/${maven.final.name}-src.tar.gz ${maven.username}@${maven.dist.siteAddress}:${maven.dist.distDir}"</echo>

    <exec dir="${maven.build.dir}" executable="${maven.scp.executable}" failonerror="true">
      <arg line="-v ${maven.build.dir}/distributions/${maven.final.name}-src.tar.gz ${maven.username}@${maven.dist.siteAddress}:${mmaven.dist.distdir}"/>
    </exec>
</goal>

</project>

