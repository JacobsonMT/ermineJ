<?xml version="1.0" ?>
<project xmlns:maven="jelly:maven"
		 xmlns:j="jelly:core"
		 xmlns:util="jelly:util"
		 xmlns:ant="jelly:ant"
 		 xmlns:jarfile="jarfile">

<!-- ==================================== -->
<!-- Ceate the distribution -->
<!-- ==================================== -->

  <goal name="build-install" prereqs="jar:jar">
    <j:set var="tag" value="${pom.artifactId}-${pom.currentVersion}" />
    <j:set var="installerDir" value="${maven.build.dir}/installer/${tag}" />
    <ant:delete dir="${installerDir}" />
    <ant:mkdir dir="${installerDir}" />
    <ant:mkdir dir="${installerDir}/bin" />
    <ant:mkdir dir="${installerDir}/lib" />
    
    <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}" />
      <j:if test="${dep.type=='jar'}">
            <ant:copy todir="${installerDir}/lib" file="${lib.path}" />
      </j:if>
    </j:forEach>
    <ant:copy todir="${installerDir}/lib" file="${maven.build.dir}/${maven.final.name}.jar" />
    <ant:copy todir="${installerDir}/lib" file="${maven.build.dir}/classes/ermineJ-help.jar" />

    <ant:copy todir="${installerDir}/bin" file="${maven.src.dir}/bin/ermineJ.bat" />
    <ant:copy todir="${installerDir}/bin" file="${maven.src.dir}/bin/ermineJ.sh" />
    <ant:copy todir="${installerDir}/bin" file="${maven.src.dir}/bin/forehead.conf" />
    <ant:copy todir="${installerDir}" file="${basedir}/web/readme-generic.html" />

    <ant:fixcrlf srcdir="${installerDir}" eol="crlf" includes="**/*.bat" />
    <ant:fixcrlf srcdir="${installerDir}" eol="lf" includes="**/*.sh,**/maven" />

    <ant:chmod file="${installerDir}/bin/ermineJ.sh" perm="ugo+x"/>

    <ant:tar tarfile="${maven.build.dir}/${maven.final.name}.tar" basedir="${maven.build.dir}/installer"/>
    <ant:gzip zipfile="${maven.build.dir}/${maven.final.name}-bindist.tar.gz" src="${maven.build.dir}/${maven.final.name}.tar"/>
    <ant:zip zipfile="${maven.build.dir}/${maven.final.name}-bindist.zip" basedir="${maven.build.dir}/installer"/>


  </goal>



<!-- ==================================== -->
<!-- help jar file and arrangements for help to be included in the webstart configuration -->
<!-- ==================================== -->
<goal name="help" description="Update and build the javahelp jar file">
	<ant:echo>Creating search index...</ant:echo>
	<ant:exec executable="${java.javahelp.jhindexer}" dir="${basedir}/ermineJ-help/classScore">
	<arg value="-verbose" /> 
	<arg value="-db" /> 
	<arg path="${basedir}/ermineJ-help/classScore/JavaHelpSearch" />
	<arg value="-c" />
	<arg path="help.config" />
	<arg value="html/tutorial" />
	<arg value="html/formats" />
	</ant:exec>
	<ant:echo>Making help jar file...</ant:echo>
	<ant:jar destfile="${basedir}/ermineJ-help.jar" update="false" excludes="**/CVS/*" basedir="${basedir}/ermineJ-help" />
	
    <ant:copy todir="${basedir}" file="${basedir}/ermineJ-help.jar" overwrite="true" />
	
	<echo>Copying files to web directory...</echo>
	<ant:copy todir="${basedir}/web/ermineJ-help" overwrite="true" >
	<fileset dir="${basedir}/ermineJ-help">
	 <include name="**/*" />
	 <exclude name="JavaHelpSearch,help.config,main.hs,map.jhm,joc.xml" />
	</fileset>
	</ant:copy>

	<echo>Setting up JNLP for help...</echo>
		<maven:get plugin="maven-jnlp-plugin" property="maven.jnlp.dir" var="jnlpDir" />
		<maven:get plugin="maven-jnlp-plugin" property="maven.jnlp.tmpdir" var="jnlpTmpDir" />
		<maven:get plugin="maven-jnlp-plugin" property="plugin.resources" var="jnlpRsc" />
	 	<ant:mkdir dir="${jnlpTmpDir}"/>
            
    <jarfile:updateManifest
        inputJar="${basedir}/ermineJ-help.jar"
        manifest="${jnlpRsc}/jnlp.manifest"
        outputDir="${jnlpTmpDir}"
    />
	
	<ant:copy todir="${jnlpDir}" file="${basedir}/JavaWebStart/help.jnlp" overwrite="true" />
	<ant:copy todir="${jnlpDir}" file="${maven.repo.local}/javahelp/jars/jh.jar" overwrite="true" />

	<ant:copy todir="${jnlpTmpDir}" file="${basedir}/ermineJ-help.jar" overwrite="true" />
	
	<ant:available file="${maven.jnlp.signjar.store}" property="maven.jnlp.store.exists"/>
	<j:if test="${maven.jnlp.store.exists}"><echo>Found a keystore, will sign ermineJ-help.jar</echo></j:if>

	<!-- sign the jar -->
    <ant:signjar
    jar="${jnlpTmpDir}/ermineJ-help.jar"
    signedjar="${jnlpDir}/ermineJ-help.jar"
    alias="${maven.jnlp.signjar.alias}"
    storepass="${maven.jnlp.signjar.storepass}"
    keystore="${maven.jnlp.signjar.store}" />
</goal>


<!-- ==================================== -->
<!-- nsis-setup (windows only) -->
<!-- ==================================== -->
<goal name="nsis-setup" prereqs="jar:jar,help" description="Set up the bindist so it is (almost) ready for making the installer.">
<j:forEach var="lib" items="${pom.artifacts}">
 	  <ant:echo message=""/>
      <ant:echo message="Name  : ${lib.dependency.artifactId}"/>
      <ant:echo message="Group : ${lib.dependency.groupId}"/>
      <ant:echo message="Base  : ${lib.file.parent}"/>
      <ant:echo message="File  : ${lib.file.name}"/>
      <ant:echo message="Path  : ${lib.path}"/>
     <ant:copy file="${lib.path}"  tofile="${maven.build.dir}/${maven.nsis.build.dir}/lib/${lib.dependency.artifactId}.jar" />
  </j:forEach>
    
	<ant:copy file="${maven.build.dir}/${maven.final.name}.jar" tofile="${maven.build.dir}/${maven.nsis.build.dir}/lib/${pom.name}.jar" />
	
	<ant:copy file="${basedir}/ermineJ-help.jar" todir="${maven.build.dir}/${maven.nsis.build.dir}/lib" />
	
	<ant:mkdir dir="${maven.build.dir}/${maven.nsis.build.dir}/data" />
	<ant:mkdir dir="${maven.build.dir}/${maven.nsis.build.dir}/bin" />
	
	<ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/data" >
		<fileset dir="${basedir}/data" >
			 <include name="**/genesets" />
			 <include name="go_200502-termdb.rdf-xml" />
			 <include name="HG-U95Av2.an.txt" />
			  <include name="GUI.prefs" />
			 <exclude name="**/fake*" />
			 <exclude name="ClassScore.preferences" />
			 <exclude name="melanoma_and_sarcomaMAS5.txt" />
			 <exclude name="one-way-anova-parsed.txt" />
			 <exclude name="test.results.txt" />
		</fileset>
	</ant:copy>
</goal>


<!-- ==================================== -->
<!-- NSIS installer build -->
<!-- ==================================== -->
<goal name="nsis" description="NSIS installer build" prereqs="nsis-setup">
 
 <ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/bin" >
		<fileset dir="${basedir}/nsis-installer/files/bin" >
			<exclude name="**/CVS/" />
			<exclude name="**/*-jre.bat" />
		</fileset>
		</ant:copy>	
 
	<ant:exec executable="${nsis.exe}">
	<arg path="${basedir}/nsis-installer/src/ermineJ-setup.nsi" />
	</ant:exec>
	
</goal>


<!-- ==================================== -->
<!-- NSIS installer build, with JRE in the distribution -->
<!-- ==================================== -->
<goal name="nsis-jre" description="NSIS installer build, with JRE in the distribution" prereqs="nsis-setup">

<ant:copy todir="${maven.build.dir}/${maven.nsis.build.dir}/bin" >
		<fileset dir="${basedir}/nsis-installer/files/bin" >
			<exclude name="**/CVS/" />
			<exclude name="**/ermineJ.bat" />
		</fileset>
		</ant:copy>	

    	<ant:exec executable="${nsis.exe}">
	<arg path="${basedir}/nsis-installer/src/ermineJ-setup-jre.nsi" />
	</ant:exec>
</goal>


</project>

